---
title: "Reading Log"
author: "Joe Shaw"
format: html
bibliography: references.bib
csl: harvard-manchester-metropolitan-university.csl
---

# "Excuse Me, Do You Have a Moment to Talk About Version Control?" [@bryan2018]

"Git was built neither for the exact usage described here, nor for broad usability. You will undoubtedly notice this, so it is best to know in advance."

"Git is a version control system. Its original purpose was to help groups of developers work collaboratively on big software projects. Git manages the evolution of a set of files—called a repository or repo—in a sane, highly structured way. It is like the “Track Changes” feature from Microsoft Word, but more rigorous, powerful, and scaled up to multiple files."

"Many people who do not use Git unwittingly reinvent a poor man’s version of it"

"With informal version control, contributors create derivative copies of iris.R, decorating the file name with initials, dates, and other descriptors. Even when working alone, this leads to multiple versions of iris.R of indeterminate relatedness (Figure 1(a)). In collaborative settings based on email distribution, the original file swiftly becomes part of a complicated phylogeny that no amount of “Track changes” and good intentions can resolve"

"GitHub is like DropBox or Google Drive, but more structured, powerful, and programmatic."

"There is a taboo against committing derived products, inherited from Git’s software development roots, because the typical product in that context is a platform-specific executable. This rationale, however, does not apply to many data science products. Rendered reports, figures, and cleaned data are often extremely valuable to others. Make them readily available."

"If a file is binary, such as a Word document or Excel spreadsheet, you will not get human-readable diffs anyway, nor can GitHub display the content in the browser."

"What is a merge conflict? It happens when Git cannot be certain how to jointly apply the diffs from two different commits to their common parent. At each location of conflict, you must pick one version or the other – or create a hybrid—and mark it as resolved."

# "Packaging data analytical work reproducibly using R (and friends)" [@marwick2018]

"Virtually all researchers use computers as a central tool in their workflow. However, our
formal education rarely includes any training in how to organise our computer files to make
it easy to reproduce results and share our entire analysis pipeline with others."

"Although the R packaging system is traditionally a method for sharing statistical
methods, we claim that R packages are suitable for use as research compendia that can
help improve computational reproducibility."

Compendium: a short but complete summary.

"Once you are ready to share your compendium, the best way is to archive a specific
commit at a repository that issues persistent URLs, such as a Digital Object Identifier DOI), for file archives (e.g. osf.io, figshare.com or zenodo.org). DOIs are designed to be
far more persistent than other URLs, which often break as web pages change over time."

"While CRAN is one of the biggest and best-known systems for archiving and distributing
R packages, we do not recommend it for research compendium packages. The main reason
that CRAN is not suitable is that it is very strict about the directory structure and contents
for the R packages that it accepts."

This is really useful paper. The premise is that structuring scientific research projects as if they were R packages leads to more reproducible research. This also makes sense in the context of laboratory test validations: what I want is a clear structure to organise a project so that I can put the entire thing somewhere public and say "this is what I did". Their term for this is a "research compendium": the summary of the entire project.

The paper also includes this Github template: https://github.com/cboettig/template

The template is for how to structure an academic paper like an R package, with these folders:

- **R**: contains all functions as .R files.

- **man**: contains documentation for functions using roxygen2.

- **tests**: contains all the tests run during package building.

- **vignettes**: the place for the actual manuscript as a markdown files (RMarkdown, Quarto etc) - this means the manuscript and analysis are fused together as one.

# References

::: {#refs}
:::
