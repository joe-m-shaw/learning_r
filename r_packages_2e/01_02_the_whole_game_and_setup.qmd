---
title: "The Whole Game"
author: "Joe Shaw"
format: html
---

# Introduction

"In R, the fundamental unit of shareable code is the package. A package bundles together code, data, documentation, and tests, and is easy to share with others."

"But packages are useful even if you never share your code. As Hilary Parker says in her introduction to packages: “Seriously, it doesn’t have to be about sharing your code (although that is an added benefit!). It is about saving yourself time.”"

# The Whole Game

devtools is a package developed at Posit which helps you make packages.

"Packages and scripts use different mechanisms to declare their dependency on other packages and to store example or test code."

In a script-oriented workflow you can use "source" to load your functions, whereas in a package-oriented workflow your functions are loaded without appearing in the global environment.

# Packages

There are various packages discussed in this textbook:

- devtools:  a "meta-package" which includes the functionality from many smaller packages, including roxygen2, testthat and usethis (a bit like how tidyverse contains many smaller packages). The purpose of devtools is to automate the building and rendering of packages.

- roxygen2: helps with documentation of functions

- testthat: helps with creating tests for your package

- usethis: automates repetitive tasks in package development

devtools was developed by Hadley Wickham's team at Posit to make developing R packages easier. You can also build R packages from scratch, but it takes a lot more time and expertise.

The four important functions that you frequently use in package development are load_all(), document(), test() and check().

The workflow (as I understand it) goes something like this:

1. Write some code, write some tests and write some documentation

2. Call your code with load_all()

3. Update your documentation with document()

4. Run all your tests with test()

5. Check that the whole package is in full working order with check()

6. Commit your changes to Github.

# Paper: "Packaging data analytical work reproducibly using R (and friends)"

“Packaging Data Analytical Work Reproducibly Using r (and Friends).” PeerJ Preprints 6 (March): e3192v2. https://doi.org/10.7287/peerj.preprints.3192v2. 

"Virtually all researchers use computers as a central tool in their workflow. However, our
formal education rarely includes any training in how to organise our computer files to make
it easy to reproduce results and share our entire analysis pipeline with others."

"Although the R packaging system is traditionally a method for sharing statistical
methods, we claim that R packages are suitable for use as research compendia that can
help improve computational reproducibility."

Compendium: a short but complete summary.

"Once you are ready to share your compendium, the best way is to archive a specific
commit at a repository that issues persistent URLs, such as a Digital Object Identifier DOI), for file archives (e.g. osf.io, figshare.com or zenodo.org). DOIs are designed to be
far more persistent than other URLs, which often break as web pages change over time."

"While CRAN is one of the biggest and best-known systems for archiving and distributing
R packages, we do not recommend it for research compendium packages. The main reason
that CRAN is not suitable is that it is very strict about the directory structure and contents
for the R packages that it accepts."

This is really useful paper. The premise is that structuring scientific research projects as if they were R packages leads to more reproducible research. This also makes sense in the context of laboratory test validations: what I want is a clear structure to organise a project so that I can put the entire thing somewhere public and say "this is what I did". Their term for this is a "research compendium": the summary of the entire project.

The paper also includes this Github template: https://github.com/cboettig/template

The template is for how to structure an academic paper like an R package, with these folders:

- **R**: contains all functions as .R files.

- **man**: contains documentation for functions using roxygen2.

- **tests**: contains all the tests run during package building.

- **vignettes**: the place for the actual manuscript as a markdown files (RMarkdown, Quarto etc) - this means the manuscript and analysis are fused together as one.
