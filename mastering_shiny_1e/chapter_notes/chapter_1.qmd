---
title: "Chapter 1"
author: "Joe Shaw"
format: html
---

# Definitions

**Shiny**: "an R package that allows you to easily create rich, interactive web apps."

**User interface**: how the app looks

**Server function**: how the app works

**Reactive programming**: "involves telling Shiny how to perform a computation, not ordering Shiny to actually go do it. It’s like the difference between giving someone a recipe versus demanding that they go make you a sandwich."

**Reactive expression**: a function that "only runs the first time it is called and then it caches its result until it needs to be updated."

**Render function**: a function that renders a particular kind of output (text, table, plot) in the HTML app.

Shiny is a bit like dbplyr. dbplyr automatically translates R code into SQL code. Shiny automatically translates R code into HTML/CSS/JavaScript.

# Running a Shiny App

What the console shows:

```{r}
#| include: TRUE
#| label: output

#> Listening on http://127.0.0.1:3827

```

"This tells you the URL where your app can be found: 127.0.0.1 is a standard address that means “this computer” and 3827 is a randomly assigned port number. You can enter that URL into any compatible2 web browser to open another copy of your app."

"Also notice that R is busy: the R prompt isn’t visible, and the console toolbar displays a stop sign icon. While a Shiny app is running, it “blocks” the R console. This means that you can’t run new commands at the R console until the Shiny app stops."

# Making Shiny Apps

The general principle is that you specify the user interface first (the front-end, what you want to see) and then you specify the server function (the back end) which creates the user interface.

Essentially you build backwards from what you want to see.
