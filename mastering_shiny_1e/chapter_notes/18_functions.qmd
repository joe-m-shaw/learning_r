---
title: "Functions"
author: "Joe Shaw"
format: html
---

Using functions in the user interface can make code easier to read and avoid duplication.

Task: make a user interface with 4 different sliders.

Example 1: code duplication. This involves manually copying and pasting the code.

```{r}
#| label: example-1
#| include: TRUE
#| eval: FALSE

ui <- fluidRow(
  sliderInput("alpha", "alpha", min = 0, max = 1, value = 0.5, step = 0.1),
  sliderInput("beta",  "beta",  min = 0, max = 1, value = 0.5, step = 0.1),
  sliderInput("gamma", "gamma", min = 0, max = 1, value = 0.5, step = 0.1),
  sliderInput("delta", "delta", min = 0, max = 1, value = 0.5, step = 0.1)
)

```

Example 2: adding a function

```{r}
#| label: example-2
#| include: TRUE
#| eval: FALSE

# Reduce the duplicated code into a function
sliderInput01 <- function(id) {
  sliderInput(id, label = id, min = 0, max = 1, value = 0.5, step = 0.1)
}

# The user interface is now much simpler to read
ui <- fluidRow(
  sliderInput01("alpha"),
  sliderInput01("beta"),
  sliderInput01("gamma"),
  sliderInput01("delta")
)

```

Example 3: functional programming

```{r}
#| label: example-3
#| include: TRUE
#| eval: FALSE

library(purrr)

sliderInput01 <- function(id) {
  sliderInput(id, label = id, min = 0, max = 1, value = 0.5, step = 0.1)
}

vars <- c("alpha", "beta", "gamma", "delta")

# Use map to call the sliderInput01 function on each input of vars.
# This returns a list of sliders
sliders <- map(vars, sliderInput01)

# FluidRow then unpacks the list
ui <- fluidRow(sliders)

```
