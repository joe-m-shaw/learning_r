---
title: "Chapter 3"
author: "Joe Shaw"
format: html
---

# Introduction

There are 2 main families of data-types in R:

- Vectors (atomic vectors, lists, dataframes, matrices, arrays)

- Nodes (functions and environments)

Atomic vector: a vector where all the elements are the same type

List: a vector where elements can be different types (including lists).

Dataframe: a list of atomic vectors (which is to say, a vector of vectors)

A dataframe is essentially a 2-dimensional vector.

"There are four primary types of atomic vectors: logical, integer, double, and character (which contains strings)."

"Each of the four primary types has a special syntax to create an individual value, AKA a **scalar**"

"Integers are written similarly to doubles but must be followed by L"

"When the inputs are atomic vectors, c() always creates another atomic vector; i.e. it flattens"

```{r}
#| include: TRUE

c(c(1, 2), c(3, 4))

```

"*Missing values tend to be infectious*: most computations involving a missing value will return another missing value."

```{r}
#| include: TRUE

x <- c(NA, 5, NA, 10)

x == NA

```

"This result is correct (if a little surprising) because there’s no reason to believe that one missing value has the same value as another."

So we use is.na() instead of == NA.

# Coercion

"For atomic vectors, type is a property of the entire vector: all elements must be the same type. When you attempt to combine different types they will be coerced in a fixed order: character → double → integer → logical."

General hierarchy of type coercion (coercing goes along the arrow):

Logical -> integer -> numeric -> complex -> character -> list

```{r}
#| include: TRUE

# FALSE is coerced to 0
c(1, FALSE)

# 1 is coerced to "1"
c("a", 1)

# TRUE is coerced to 1L (integer)
c(TRUE, 1L)

# 1 == "1" is TRUE because 1 is coerced to "1"
1 == "1"

# -1 < FALSE is TRUE because FALSE is coereced to 0
# -1 < 0 is TRUE
-1 < FALSE

# "one" < 2 is FALSE because 2 is coerced to "2"
# The Boolean logic evaluates the lexicographic order of the characters.
# Numbers precede letters in lexicographic order.
"one" < "2"

```
"Numeric" doesn't seem to be a useful concept, because it's not actually a type: integer and double are both "numeric types".

Integer gets coerced into double.

```{r}
#| include: TRUE

integer <- 1L

double <- 1.0

x <- c(integer, double)

typeof(x)

```

# Attributes

"You might have noticed that the set of atomic vectors does not include a number of important data structures like matrices, arrays, factors, or date-times. These types are built on top of atomic vectors by adding attributes."

"You can think of attributes as name-value pairs that attach metadata to an object."

Attributes are like extra information you stick to an object.

```{r}
#| include: TRUE

# Bind name a to value list 1:3
a <- 1:3

# Access attribute "x" of name a and bind it to value "abcdef"
attr(a, "x") <- "abcdef"

attr(a, "x")

# Access atrribute "y" of name a and bind it to value 4:6
attr(a, "y") <- 4:6

str(attributes(a))

# Or equivalently
a <- structure(
  1:3, 
  x = "abcdef",
  y = 4:6
)

```

"Attributes should generally be thought of as ephemeral"

"There are only two attributes that are routinely preserved:

- names, a character vector giving each element a name.

- dim, short for dimensions, an integer vector, used to turn vectors into matrices or arrays."

"Adding a dim attribute to a vector allows it to behave like a 2-dimensional matrix or a multi-dimensional array."

# S3 atomic vectors

Class is a type of vector attribute.

## Factors

"A factor is a vector that can contain only predefined values. It is used to store categorical data. **Factors are built on top of an integer vector with two attributes**: a class, “factor”, which makes it behave differently from regular integer vectors, and levels, which defines the set of allowed values."

"While factors look like (and often behave like) character vectors, they are built on top of integers."

## Dates

"Date vectors are built on top of double vectors. They have class “Date” and no other attributes"

"The value of the double (which can be seen by stripping the class), represents the number of days since 1970-01-01. This date is known as the Unix Epoch."

```{r}
#| include: TRUE

date <- as.Date("1970-02-01")

# Type is double
typeof(date)

# Class is date
attributes(date)

# The value of the double
unclass(date)

f1 <- factor(letters)

levels(f1) <- rev(levels(f1))

f2 <- rev(factor(letters))

f3 <- factor(letters, levels = rev(letters))

```

Wikipedia: "The current epoch of 1 January 1970 00:00:00 UTC was selected arbitrarily by Unix engineers because it was considered a convenient date to work with."

# Lists

"Technically speaking, each element of a list is actually the same type because, as you saw in Section 2.3.3, each element is really a reference to another object, which can be any type"

"Lists are sometimes called recursive vectors because a list can contain other lists."

```{r}
#| include: TRUE

# List-ception

l3 <- list(list(list(1)))

str(l3)

```

# Dataframes

"Data frames are one of the biggest and most important ideas in R, and one of the things that make R different from other programming languages. However, in the over 20 years since their creation, the ways that people use R have changed, and some of the design decisions that made sense at the time data frames were created now cause frustration."

"This frustration lead to the creation of the tibble,31 a modern reimagining of the data frame. Tibbles are designed to be (as much as possible) drop-in replacements for data frames that fix those frustrations. A concise, and fun, way to summarise the main differences is that tibbles are lazy and surly: they do less and complain more."

Differences between tibbles and dataframes:

- Tibbles never coerce their input

- Tibbles don't automatically convert non-syntactic names

- Tibbles only recycle vectors of length one (see below for example)

- Tibbles allow you to refer to values you've just created during construction

```{r}
#| include: TRUE
#| error: TRUE
#| message: FALSE
#| warning: FALSE

library(tidyverse)

data.frame(x = 1:4, y = 1:2)

data.frame(x = 1:4, y = 1:3)

tibble(x = 1:4, y = 1)

tibble(x = 1:4, y = 1:2)

```

readr::read_csv (which is in the tidyverse) returns a tibble.

utils::read.csv returns a data-frame.

There are therefore several differences between using read.csv and read_csv, which can be easy to forget.

"Row names arise naturally if you think of data frames as 2D structures like matrices: columns (variables) have names so rows (observations) should too."

You can have a column of a dataframe that is itself a dataframe.

https://notstatschat.tumblr.com/post/124987394001/stringsasfactors-sigh
