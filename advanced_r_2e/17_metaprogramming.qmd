---
title: "Metaprogramming"
author: "Joe Shaw"
format: html
---

Meta-programming: just like meta-data is data about data, meta-programming is programming about programming.

"The first big idea is that code is data: you can capture code and compute on it as you can with any other type of data."

Tidy evaluation is a framework that was introduced in the rlang package.

**Expression:** captured code. "An expression isnâ€™t a single type of object, but is a collective term for any of four types (call, symbol, constant, or pairlist)"

An expression returns exactly what you put in.

```{r}

library(rlang)
library(lobstr)

# The expr function returns what is entered as an argument, rather than evaluating it.
# Example: this call does not return 1110 because the function doesn't evaluate the argument (10 + 100 + 1000) as a calculation

expr(10 + 100 + 1000)

```
If you want to capture the inputs to an argument, you have to use enexpr() rather than expr(). enexpr() is like "enrich" (i.e. "to make something rich", "to make something an expression").

"Once you have captured an expression, you can inspect and modify it."

# Code is a tree

"Behind the scenes, almost every programming language represents code as a tree, often called the **abstract syntax tree**, or AST for short. R is unusual in that you can actually inspect and manipulate this tree."

# Environments and evaluation

The eval() function takes an expression and an environment.

```{r}
#| label: eval
#| include: TRUE

library(rlang)

eval(
  # Evaluate the expression x + y 
  expr(x + y), 
  # Do it in an environment where x is 1 and y is 10
  env(x = 1, y = 10))

```

This means you can evaluate code in a specific environment where the code will have a specific impact. A high-level example of this is the dbplyr package - R input code is evaluated in an environment where R code is translated into SQL code, and then the SQL code is returned as the result of the evaluation.

**Quosure:** a data structure containing an expression and an environment for it to be evaluated in.

```{r}
#| label: quosures
#| include: TRUE

df <- data.frame(x = 1:3)

# a is defined in the current environment as 10
a <- 10

with2 <- function(df, expr) {
  
  # a is also defined within the function environment
  a <- 1000
  
  # eval_tidy to evaluate an expression
  eval_tidy(
    # enquo() specifies that expr is a quosure: an expression which
    # keeps track of the context that it was written in.
    # In this case, expr is written in the current environment.
    enquo(expr), df)
  
}

# We call with2 to evaluate the dataframe df with the expression x + a
# Because we specified that the expression is a quosure, the 
# value of a is evaluated as 10 (from the environment the expression
# was written in), not 100 (from the execution environemnt of the function)
with2(df, x + a)

```

Quosures are a kind of "defused expression". "Defusing" can be thought of as "capturing" an expression.

```{r}
#| label: defused-expression
#| include: TRUE

# This code returns the result of the expression 1 + 1
1 + 1

# This code "defuses" (captures) the expression without
# evaluating (or executing) it
expr(1 + 1)

```
